<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ include file="Common.tt" #>
<#@ assembly name="System.Core" #>
using System;

namespace Panda
{
    public static class MatchExtensions
    {
<#
    foreach (var tArgs in genericArgs())
    {
        var actionsList = tArgs
            .Select(p => "Action<" + p + ">")
            .Zip(argumentNames(), (p, q) => p + " " + q);
        WriteLine(tabs(2) + "public static void Match<{0}>(this IUnion<{0}> self, {1})",
            string.Join(", ", tArgs),
            string.Join(", ", actionsList));
        WriteLine(tabs(2) + "{");

        var possibleTypes = tArgs
            .Zip(argumentNames(), (TArg, ArgumentName) => new {TArg, ArgumentName})
            .Select((p, i) => new {p.TArg, p.ArgumentName, Idx = i})
            .ToList();

        foreach (var possibility in possibleTypes)
        {
            WriteLine(tabs(3) + "{0}if(self is {1})", possibility.Idx != 0 ? "else " : "", possibility.TArg);
            WriteLine(tabs(3) + "{");
            WriteLine(tabs(4) + "{0}(({1})self);", possibility.ArgumentName, possibility.TArg);
            WriteLine(tabs(3) + "}");
        }
        printElseBlock();

        var funcList = tArgs
            .Select(p => "Func<" + p + ", TRet>")
            .Zip(argumentNames(), (p, q) => p + " " + q);
        WriteLine(tabs(2) + "public static TRet Match<{0}, TRet>(this IUnion<{0}> self, {1})",
            string.Join(", ", tArgs),
            string.Join(", ", funcList));
        WriteLine(tabs(2) + "{");
        foreach (var possibility in possibleTypes)
        {
            WriteLine(tabs(3) + "{0}if(self is {1})", possibility.Idx != 0 ? "else " : "", possibility.TArg);
            WriteLine(tabs(3) + "{");
            WriteLine(tabs(4) + "return {0}(({1})self);", possibility.ArgumentName, possibility.TArg);
            WriteLine(tabs(3) + "}");
        }
        printElseBlock();
    }
#>
    }
}
<#+
private void printElseBlock()
{
    WriteLine(tabs(3) + "else");
    WriteLine(tabs(3) + "{");
    WriteLine(tabs(4) + @"throw new ArgumentException(""Could not find correct match for self"", ""self"");");
    WriteLine(tabs(3) + "}");
    WriteLine(tabs(2) + "}" + Environment.NewLine);
}
#>